// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	domain "sema/Domain"

	mock "github.com/stretchr/testify/mock"
)

// AIService is an autogenerated mock type for the AIService type
type AIService struct {
	mock.Mock
}

// GenerateActionCard provides a mock function with given fields: actionBlock
func (_m *AIService) GenerateActionCard(actionBlock *domain.ActionBlock) (*string, error) {
	ret := _m.Called(actionBlock)

	if len(ret) == 0 {
		panic("no return value specified for GenerateActionCard")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ActionBlock) (*string, error)); ok {
		return rf(actionBlock)
	}
	if rf, ok := ret.Get(0).(func(*domain.ActionBlock) *string); ok {
		r0 = rf(actionBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ActionBlock) error); ok {
		r1 = rf(actionBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateCrisisCard provides a mock function with given fields: lang, region, tags
func (_m *AIService) GenerateCrisisCard(lang string, region string, tags []string) (*string, error) {
	ret := _m.Called(lang, region, tags)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCrisisCard")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) (*string, error)); ok {
		return rf(lang, region, tags)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) *string); ok {
		r0 = rf(lang, region, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(lang, region, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNormalChatMsg provides a mock function with given fields: msg, content
func (_m *AIService) GenerateNormalChatMsg(msg string, content string) (string, error) {
	ret := _m.Called(msg, content)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNormalChatMsg")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(msg, content)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(msg, content)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(msg, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRiskCheck provides a mock function with given fields: content
func (_m *AIService) GenerateRiskCheck(content string) (int, []string, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRiskCheck")
	}

	var r0 int
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int, []string, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) []string); ok {
		r1 = rf(content)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(content)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateSummary provides a mock function with given fields: content
func (_m *AIService) GenerateSummary(content string) (string, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSummary")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTopicKey provides a mock function with given fields: content
func (_m *AIService) GenerateTopicKey(content string) (string, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTopicKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIService creates a new instance of AIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIService {
	mock := &AIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
