// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	domain "sema/Domain"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepositoryI is an autogenerated mock type for the ChatRepositoryI type
type ChatRepositoryI struct {
	mock.Mock
}

// GetActionBlock provides a mock function with given fields: topic_key, lang
func (_m *ChatRepositoryI) GetActionBlock(topic_key string, lang string) (*domain.ActionBlock, bool) {
	ret := _m.Called(topic_key, lang)

	if len(ret) == 0 {
		panic("no return value specified for GetActionBlock")
	}

	var r0 *domain.ActionBlock
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, string) (*domain.ActionBlock, bool)); ok {
		return rf(topic_key, lang)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.ActionBlock); ok {
		r0 = rf(topic_key, lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ActionBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(topic_key, lang)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewChatRepositoryI creates a new instance of ChatRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepositoryI {
	mock := &ChatRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
