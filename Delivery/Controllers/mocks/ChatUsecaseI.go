// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	domain "sema/Domain"

	mock "github.com/stretchr/testify/mock"
)

// ChatUsecaseI is an autogenerated mock type for the ChatUsecaseI type
type ChatUsecaseI struct {
	mock.Mock
}

// ComposeCardUsecase provides a mock function with given fields: _a0
func (_m *ChatUsecaseI) ComposeCardUsecase(_a0 *domain.ActionBlock) (*string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ComposeCardUsecase")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ActionBlock) (*string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*domain.ActionBlock) *string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ActionBlock) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateCrisisCard provides a mock function with given fields: lang, region, tags
func (_m *ChatUsecaseI) GenerateCrisisCard(lang string, region string, tags []string) (*string, error) {
	ret := _m.Called(lang, region, tags)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCrisisCard")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) (*string, error)); ok {
		return rf(lang, region, tags)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) *string); ok {
		r0 = rf(lang, region, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(lang, region, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActionBlockUsecase provides a mock function with given fields: topic_key, lang
func (_m *ChatUsecaseI) GetActionBlockUsecase(topic_key string, lang string) (*domain.ActionBlock, error) {
	ret := _m.Called(topic_key, lang)

	if len(ret) == 0 {
		panic("no return value specified for GetActionBlockUsecase")
	}

	var r0 *domain.ActionBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.ActionBlock, error)); ok {
		return rf(topic_key, lang)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.ActionBlock); ok {
		r0 = rf(topic_key, lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ActionBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(topic_key, lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOffLinePackUseCase provides a mock function with given fields: lang
func (_m *ChatUsecaseI) GetOffLinePackUseCase(lang string) ([]*domain.ActionBlock, error) {
	ret := _m.Called(lang)

	if len(ret) == 0 {
		panic("no return value specified for GetOffLinePackUseCase")
	}

	var r0 []*domain.ActionBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.ActionBlock, error)); ok {
		return rf(lang)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.ActionBlock); ok {
		r0 = rf(lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ActionBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcesUseCase provides a mock function with given fields: region
func (_m *ChatUsecaseI) GetResourcesUseCase(region string) ([]*domain.Crisis, error) {
	ret := _m.Called(region)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesUseCase")
	}

	var r0 []*domain.Crisis
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.Crisis, error)); ok {
		return rf(region)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.Crisis); ok {
		r0 = rf(region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Crisis)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IntentMappingUsecase provides a mock function with given fields: message
func (_m *ChatUsecaseI) IntentMappingUsecase(message string) (string, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for IntentMappingUsecase")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RiskCheckUsecase provides a mock function with given fields: message
func (_m *ChatUsecaseI) RiskCheckUsecase(message string) (int, []string, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for RiskCheckUsecase")
	}

	var r0 int
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int, []string, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) []string); ok {
		r1 = rf(message)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(message)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewChatUsecaseI creates a new instance of ChatUsecaseI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatUsecaseI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatUsecaseI {
	mock := &ChatUsecaseI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
